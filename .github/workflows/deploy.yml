# Nome do workflow que aparecerá na aba "Actions" do GitHub
name: CI/CD - Deploy to Production

# Gatilho: Este workflow roda a cada push na branch 'master'
on:
  push:
    branches: [ main ]

# Variáveis de ambiente para simplificar
env:
  IMAGE_NAME: joaop14/meu-repo-python
  CONTAINER_NAME: minha-aplicacao # Nome que o container terá no servidor

jobs:
  build-and-deploy:
    # O tipo de máquina virtual para rodar o job
    runs-on: ubuntu-latest

    steps:
      # 1. Faz o checkout do código do seu repositório
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Login no DockerHub
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Extrai metadados (tags) para a imagem Docker
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      # 4. Constrói a imagem Docker e envia para o registry
      # A tag será baseada no hash do commit, garantindo uma versão única
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 5. Conecta no servidor via SSH e executa o deploy
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Garanta que o diretório para o volume no SERVIDOR exista
            mkdir -p /home/${{ secrets.SSH_USER }}/app-data

            # Faz o pull da nova imagem
            docker pull ${{ env.IMAGE_NAME }}:latest

            # Para e remove o container antigo
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true

            # Inicia o novo container com a imagem atualizada E O VOLUME
            docker run -d \
              -p 80:5000 \
              --name ${{ env.CONTAINER_NAME }} \
              --restart always \
              -v /home/${{ secrets.SSH_USER }}/app-data:/app/data \
              ${{ env.IMAGE_NAME }}:latest